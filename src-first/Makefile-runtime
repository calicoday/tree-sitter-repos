# updated makefile for 0.20.7 that versions and shunts

# not used anywhere I can find:
# VERSION := 0.6.3

PROJ_NAME := tree-sitter
LIB_NAME := lib$(PROJ_NAME)
INCLUDE_NAME := tree_sitter

# pass version in env, eg `VERS_TAG='0.2.3' make ...`
ifndef VERS_TAG
VERS_TAG := $(shell git describe --tags )
VERS_TAG := $(subst v,,$(VERS_TAG))
endif

VERS_WORDS := $(subst ., ,$(VERS_TAG))

VERS_MAJ := $(word 1, $(VERS_WORDS))
VERS_MIN := $(word 2, $(VERS_WORDS))
VERS_PATCH := $(word 3, $(VERS_WORDS))

# SHUNTLIB may differ by project, eg /$(PROJ_NAME) for tree-sitter vs 
# /tree-sitter-lang/$(PROJ_NAME) for langs.
SHUNTLIB ?= /$(PROJ_NAME)


# Any necessary changes to AMALGAMATED building are left as an exercise for the reader.
# It is clearly for feeding a list of source files rather than globbing but 'amalgam' 
# doesn't occur anywhere else in the repo, so I don't know when it's useful.

# collect sources
ifneq ($(AMALGAMATED),1)
	SRC := $(wildcard lib/src/*.c)
	# do not double-include amalgamation
	SRC := $(filter-out lib/src/lib.c,$(SRC))
else
	# use amalgamated build
	SRC := lib/src/lib.c
endif
OBJ := $(SRC:.c=.o)

# define default flags, and override to append mandatory flags
CFLAGS ?= -O3 -Wall -Wextra -Werror
override CFLAGS += -std=gnu99 -fPIC -Ilib/src -Ilib/include

# I very much prefer compiling to a build/ (or other) subdir but, frankly,
# I'm tired and I don't want to have to test this whole thing again just now.

# Tidbits:
# - a symlink named with the short version, major.minor instead of major.minor.patch, 
#   seems a common choice but is it actually useful for this proj?
# - the symlinks ought always be to the latest version available, not just
#   the most recently built, but I don't know how to code that in make, so
#   I've made a separate target `install-and-symlink` for when you know you're
#   installing the best ever version (and I think I like that better anyway,
#   since it should happen rarely and intentionally)
# - move tree-sitter to 1.0.0
# - change tree-sitter tagging to just maj.min.patch, no 'v'


# The versioned SHUNTINCLUDE needs to be added to the linking include path, 
# then #include statements same, simple, relative paths as before. 

# Everything after this point is specific to the fixed install directory structure but
# not otherwise project-specific. Example target results for:
#
#   PROJ_NAME := one-example # <- hyphenated like tree-sitter
#   LIB_NAME := lib$(PROJ_NAME)
#   INCLUDE_NAME := one_example <- underscored like lib/tree_sitter/ 
#
#  called with:
# 
#   `VERS_TAG='0.2.3' make ...`
# 
# all: <- build only
#   proj_dir/ <- or proj_dir/build_dir/???
#     libone-example.0.2.3.dylib or libone-example.so.0.2.3
#     libone-example.0.2.3.a 
#     libone-example.0.2.dylib or libone-example.so.0.2 (symlink to 0.2.3)
#     libone-example.dylib or libone-example.so (symlink to 0.2.3)
#     libone-example.a (symlink to 0.2.3)
#   
# install: <- all, plus:
#   /usr/local/lib/
#     one-example/ <- shared by all lib versions
#       libone-example.0.2.3.dylib or libone-example.so.0.2.3
#       libone-example.0.2.3.a 
#       pkgconfig/ <- shared by all lib versions
#         one_example.0.2.3.pc <- (shd symlink to best version???)
#
#   /usr/local/include/
#     one_example.0.2.3/ <- versioned SHUNTINCLUDE
#       one_example/ <- eg #include <one_example/one_header.h>
#         one_header.h
#         another_header.h
# 
# install-and-symlink: <- install, plus:
#   /usr/local/lib/
#     one-example.0.2.3/
#       libone-example.0.2.dylib or libone-example.so.0.2 (symlink to 0.2.3)
#       libone-example.dylib or libone-example.so (symlink to 0.2.3)
#       libone-example.a (symlink to 0.2.3)
#       pkgconfig/
#         one_example.pc <- (symlink to 0.2.3) ???
  
VERS_MAJMIN := $(VERS_MAJ).$(VERS_MIN)
VERS_FULL := $(VERS_MAJ).$(VERS_MIN).$(VERS_PATCH)

# SHUNTLIB ?= /$(PROJ_NAME)
SHUNTINCLUDE ?= /$(INCLUDE_NAME).$(VERS_FULL)

# install directory layout
PREFIX ?= /usr/local
INCLUDEDIR ?= $(PREFIX)/include$(SHUNTINCLUDE)
LIBDIR ?= $(PREFIX)/lib$(SHUNTLIB)
PCLIBDIR ?= $(LIBDIR)/pkgconfig

# OS-specific bits
ifeq ($(shell uname),Darwin)
	SOEXT = dylib
	SOEXT_MAJMIN = $(VERS_MAJMIN).dylib
	SOEXT_FULL = $(VERS_FULL).dylib
	LINKSHARED += -dynamiclib -Wl,-install_name,$(LIBDIR)/$(LIB_NAME).$(VERS_FULL).dylib
# 	LINKSHARED += -dynamiclib -Wl,-install_name,$(LIBDIR)/$(LIB_NAME).$(VERS_MAJMIN).dylib
else
	SOEXT = so
	SOEXT_MAJMIN = so.$(VERS_MAJMIN)
	SOEXT_FULL = so.$(VERS_FULL)
	LINKSHARED += -shared -Wl,-soname,$(LIB_NAME).so.$(VERS_FULL)
# 	LINKSHARED += -shared -Wl,-soname,$(LIB_NAME).so.$(VERS_MAJMIN)
endif
ifneq (,$(filter $(shell uname),FreeBSD NetBSD DragonFly))
	PCLIBDIR := $(PREFIX)/libdata/pkgconfig
endif

all: $(LIB_NAME).$(VERS_FULL).a $(LIB_NAME).$(SOEXT_FULL)

$(LIB_NAME).$(VERS_FULL).a: $(OBJ)
	@echo "=== a LIB_NAME: $(LIB_NAME), VERS_FULL: $(VERS_FULL), @: $(@)"
	@echo "  VERS_MAJMIN: $(VERS_MAJMIN)===, VERS_MIN: $(VERS_MIN)==="
	$(AR) rcs $@ $^
	ln -sf $@ $(LIB_NAME).a

$(LIB_NAME).$(SOEXT_FULL): $(OBJ)
	@echo "=== dylib LIB_NAME: $(LIB_NAME), VERS_FULL: $(VERS_FULL), @: $(@)"
	$(CC) $(LDFLAGS) $(LINKSHARED) $^ $(LDLIBS) -o $@
	ln -sf $@ $(LIB_NAME).$(SOEXT)
	ln -sf $@ $(LIB_NAME).$(SOEXT_MAJMIN)

install: all
	install -d '$(DESTDIR)$(LIBDIR)'
	install -m755 $(LIB_NAME).$(VERS_FULL).a '$(DESTDIR)$(LIBDIR)'/$(LIB_NAME).$(VERS_FULL).a
	install -m755 $(LIB_NAME).$(SOEXT_FULL) '$(DESTDIR)$(LIBDIR)'/$(LIB_NAME).$(SOEXT_FULL)
	install -d '$(DESTDIR)$(INCLUDEDIR)'/$(INCLUDE_NAME)
	install -m644 lib/include/$(INCLUDE_NAME)/*.h '$(DESTDIR)$(INCLUDEDIR)'/$(INCLUDE_NAME)/
	install -d '$(DESTDIR)$(PCLIBDIR)'
	sed -e 's|@LIBDIR@|$(LIBDIR)|;s|@INCLUDEDIR@|$(INCLUDEDIR)|;s|@VERSION@|$(VERSION)|' \
	    -e 's|=$(PREFIX)|=$${prefix}|' \
	    -e 's|@PREFIX@|$(PREFIX)|' \
	    $(PROJ_NAME).pc.in > '$(DESTDIR)$(PCLIBDIR)'/$(INCLUDE_NAME).$(VERS_FULL).pc
# 	    $(PROJ_NAME).pc.in > '$(DESTDIR)$(PCLIBDIR)'/$(PROJ_NAME).pc

install-and-symlink: install
	ln -sf $(LIB_NAME).$(VERS_FULL).a '$(DESTDIR)$(LIBDIR)'/$(LIB_NAME).a
	ln -sf $(LIB_NAME).$(SOEXT_FULL) '$(DESTDIR)$(LIBDIR)'/$(LIB_NAME).$(SOEXT_MAJMIN)
	ln -sf $(LIB_NAME).$(SOEXT_FULL) '$(DESTDIR)$(LIBDIR)'/$(LIB_NAME).$(SOEXT)

clean:
	rm -f lib/src/*.o $(LIB_NAME).a $(LIB_NAME).$(VERS_FULL).a \
	  $(LIB_NAME).$(SOEXT) $(LIB_NAME).$(SOEXT_MAJMIN) $(LIB_NAME).$(SOEXT_FULL)

.PHONY: all install clean
